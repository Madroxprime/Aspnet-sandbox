// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceRequestTracker.Data;

#nullable disable

namespace ServiceRequestTracker.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250227200649_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("LocationUser", b =>
                {
                    b.Property<int>("LocationsLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationsLocationId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("LocationUser");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Model")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssetId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequstStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceRequestId");

                    b.ToTable("Requests");

                    b.HasDiscriminator<int>("RequestType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.HRServiceRequest", b =>
                {
                    b.HasBaseType("ServiceRequestTracker.Models.ServiceRequest");

                    b.Property<string>("HrField")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.ITServiceRequest", b =>
                {
                    b.HasBaseType("ServiceRequestTracker.Models.ServiceRequest");

                    b.Property<int?>("AssetId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AssetId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.MaintanceRequest", b =>
                {
                    b.HasBaseType("ServiceRequestTracker.Models.ServiceRequest");

                    b.Property<string>("MaintanceField")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("LocationUser", b =>
                {
                    b.HasOne("ServiceRequestTracker.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceRequestTracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.HRServiceRequest", b =>
                {
                    b.HasOne("ServiceRequestTracker.Models.Location", "RequestLocation")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceRequestTracker.Models.User", "Requester")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestLocation");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.ITServiceRequest", b =>
                {
                    b.HasOne("ServiceRequestTracker.Models.Asset", "Asset")
                        .WithMany("ServiceHistory")
                        .HasForeignKey("AssetId");

                    b.HasOne("ServiceRequestTracker.Models.Location", "RequestLocation")
                        .WithMany("LocationRequests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceRequestTracker.Models.User", "Requester")
                        .WithMany("UserRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("RequestLocation");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.MaintanceRequest", b =>
                {
                    b.HasOne("ServiceRequestTracker.Models.Location", "RequestLocation")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceRequestTracker.Models.User", "Requester")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestLocation");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.Asset", b =>
                {
                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.Location", b =>
                {
                    b.Navigation("LocationRequests");
                });

            modelBuilder.Entity("ServiceRequestTracker.Models.User", b =>
                {
                    b.Navigation("UserRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
